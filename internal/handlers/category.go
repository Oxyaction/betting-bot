package handlers

import (
	"context"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sirupsen/logrus"
	"gitlab.com/fireferretsbet/tg-bot/internal/config"
)

var matches map[string][]string = map[string][]string{
	"–°–ø–æ—Ä—Ç ‚öΩ":      []string{"1. –î–∏–Ω–∞–º–æ - –®–∞—Ö—Ç–µ—Ä", "2. –£—Å–∏–∫ - –†–æ–∫–∫–∏"},
	"–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç üéÆ": []string{"1. Omega - Spirits (Dota 2)", "2. Scarlett - Neeb (SC2)", "3. Moon - Grubby (WC3)"},
	"–ü–æ–ª–∏—Ç–∏–∫–∞ üèõÔ∏è":  []string{"1. Joe Biden - Donald Trump", "2. –õ—É–∫–∞—à–µ–Ω–∫–æ - –¢–∏—Ö–∞–Ω–æ–≤—Å–∫–∞—è"},
}

var categoryMenuKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–°–ø–æ—Ä—Ç ‚öΩ"),
		tgbotapi.NewKeyboardButton("–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç üéÆ"),
		tgbotapi.NewKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ üèõÔ∏è"),
		tgbotapi.NewKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"),
	),
)

type CategoryHandler struct {
	GenericHandler
}

func NewCategoryHandler(log *logrus.Logger, config *config.Config, bot *tgbotapi.BotAPI) Handler {
	return &CategoryHandler{
		GenericHandler{
			keys: []string{
				"–°–ø–æ—Ä—Ç ‚öΩ",
				"–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç üéÆ",
				"–ü–æ–ª–∏—Ç–∏–∫–∞ üèõÔ∏è",
			},
			bot: bot,
		},
	}
}

func (h *CategoryHandler) Handle(update tgbotapi.Update, ctx context.Context) tgbotapi.MessageConfig {
	var textResponse string
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	if matches, ok := matches[update.Message.Text]; ok {
		var buttons []tgbotapi.KeyboardButton = make([]tgbotapi.KeyboardButton, len(matches))
		for i := 0; i < len(matches); i++ {
			buttons = append(buttons, tgbotapi.NewKeyboardButton(matches[i]))
		}
		buttons = append(buttons, tgbotapi.NewKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"))
		var digitsMenuKeyboard = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(buttons...),
		)

		textResponse = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –º–∞—Ç—á: \n\n"
		textResponse += strings.Join(matches, "\n")
		msg.Text = textResponse
		msg.ReplyMarkup = digitsMenuKeyboard
	} else {
		msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é"
	}

	return msg
}

func (h *CategoryHandler) GetDialogContext() string {
	return "match"
}
